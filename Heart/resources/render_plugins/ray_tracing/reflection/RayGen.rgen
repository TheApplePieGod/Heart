#version 460
#extension GL_EXT_ray_tracing : require

#include "../frame_data/FrameBuffer.glsl"
#include "Common.glsl"

layout(binding = 1) uniform accelerationStructureEXT tlas;
layout(binding = 2, rgba16f) uniform writeonly image2D outImage;
layout(binding = 3) uniform readonly sampler2D depthImage;
layout(binding = 4) uniform readonly sampler2D normalImage;

layout(location = 0) rayPayloadEXT HitPayload prd;

// https://wickedengine.net/2019/09/22/improved-normal-reconstruction-from-depth/
vec3 ComputeWorldPosition(vec2 uv, float depth)
{
    float x = uv.x * 2.0f - 1.0f;
    float y = (1.0 - uv.y) * 2.0f - 1.0f;
    vec4 positionS = vec4(x, y, depth, 1.0f);
    vec4 positionW = frameBuffer.data.invViewProj * positionS;
    return positionW.xyz / positionW.w;
}

void main() 
{
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

    // Read from depth buffer to determine where to cast rays
    float depth = texture(depthImage, inUV);

    // Ignore infinitely far away values (envmap)
    if (depth == float(frameBuffer.data.reverseDepth))
    {
        imageStore(
            outImage,
            ivec2(gl_LaunchIDEXT.xy),
            vec4(0.0)
        );
        return;
    }
    
    vec3 worldPos = ComputeWorldPosition(inUV, depth);
    vec3 worldNormal = (frameBuffer.data.invView * vec4(texture(normalImage, inUV).xyz, 1.0)).xyz;


    vec2 pixCoords = inUV * 2.0 - 1.0;
    vec4 origin = frameBuffer.data.invView * vec4(0, 0, 0, 1);
    vec4 target = frameBuffer.data.invProj * vec4(pixCoords.x, pixCoords.y, 1, 1);
    vec4 direction = frameBuffer.data.invView * vec4(normalize(target.xyz), 0);

    vec3 hitValue = vec3(0);
    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = frameBuffer.data.clipPlanes.x;
    float tMax = frameBuffer.data.clipPlanes.y;
    prd.rayOrigin = origin.xyz;
    prd.rayDir = direction.xyz;
    prd.done = 1;
    prd.attenuation = 1.0;
    prd.depth = 0;
    float mask = 1.f;
    for (;;)
    {
        traceRayEXT(
            tlas,           // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            prd.rayOrigin,  // ray origin
            tMin,           // ray min range
            prd.rayDir,     // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );

        hitValue += prd.hitValue * mask;
        mask *= prd.attenuation;
        
        prd.depth++;
        if (prd.done == 1 || prd.depth >= 3)
            break;

        prd.done = 1;
    }

    imageStore(
        image,
        ivec2(gl_LaunchIDEXT.xy),
        vec4(hitValue, 1.0)
    );
}
