#version 450

#include "../../util/Misc.glsl"
#include "../../gbuffer/Util.glsl"
#include "EdgeStopping.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D srcGBufferNormals;
layout(binding = 1) uniform sampler2D srcGBufferDepth;
layout(binding = 2) uniform sampler2D dstGBufferNormals;
layout(binding = 3) uniform usampler2D dstGBufferColor;
layout(binding = 4) uniform sampler2D dstGBufferDepth;
layout(binding = 5) uniform sampler2D filterInput;
layout(binding = 6, rgba16f) uniform writeonly image2D outColor;

const vec2 DIRECTIONS[4] = vec2[](
    vec2(0.0f, 1.0f),
    vec2(1.0f, 0.0f),
    vec2(-1.0f, 0.0f),
    vec2(0.0, -1.0f)
);

void main()
{
    ivec2 size = imageSize(outColor);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (coord.x >= size.x || coord.y >= size.y)
        return;

    vec2 texCoord = (vec2(coord) + vec2(0.5)) / size;
    float dstDepth = texelFetch(dstGBufferDepth, coord, 0).r;

    // Nothing there
    if (dstDepth == -1.f)
    {
        imageStore(outColor, coord, vec4(0.f));
        return;
    }

    const uvec4 colorData = texelFetch(dstGBufferColor, coord, 0);
    float roughness = UnpackRoughness(colorData);

    // Check roughness. We can directly sample mirror reflections
    if (roughness <= 0.05)
    {
        vec4 col = textureLod(filterInput, texCoord, 0);
        imageStore(outColor, coord, col);
        return;
    }

    const vec4 dstNormalData = texelFetch(dstGBufferNormals, coord, 0);
    const vec3 dstNormal = OctahedronDecode(dstNormalData.rg);

    vec2 texelStep = vec2(1.0) / vec2(textureSize(srcGBufferNormals, 0));
    vec4 totalColor = vec4(0.0);
    float weightSum = 0.0;
    for (uint i = 0; i < 4; i++)
    {
        vec2 srcTexCoord = texCoord + DIRECTIONS[i] * texelStep;
        float srcDepth = textureLod(srcGBufferDepth, srcTexCoord, 0).r;

        // Nothing there
        if (srcDepth == -1.f)
            continue;

        const vec4 srcNormalData = textureLod(srcGBufferNormals, srcTexCoord, 0);
        const vec3 srcNormal = OctahedronDecode(srcNormalData.rg);
        float wZ = EdgeStoppingWeightDepth(dstDepth, srcDepth, 1.0);
        float wN = EdgeStoppingWeightNormal(dstNormal, srcNormal, 32.0);
        float w = EdgeStoppingWeight(wZ, wN, 0);

        totalColor += textureLod(filterInput, srcTexCoord, 0) * w;
        weightSum += w;
    }

    totalColor /= max(weightSum, 0.0001);

    imageStore(outColor, coord, totalColor);
}
