#version 450

#define FRAME_BUFFER_BINDING 0
#define FRAME_BUFFER_SET 0
#include "../../frame_data/FrameBuffer.glsl"

#include "EdgeStopping.glsl"
#include "../../util/Misc.glsl"

#define MAX_NORMAL_DISTANCE 0.1f
#define MAX_PLANE_DISTANCE 5.0f

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 1) uniform sampler2D prevGBuffer2;
//layout(binding = 2) uniform sampler2D prevGBuffer3;
layout(binding = 3) uniform sampler2D prevGBufferDepth;
layout(binding = 4) uniform sampler2D newGBuffer2;
layout(binding = 5) uniform sampler2D newGBuffer3;
layout(binding = 6) uniform sampler2D newGBufferDepth;
layout(binding = 7) uniform sampler2D prevColors;
layout(binding = 8) uniform sampler2D prevMoments;
layout(binding = 9) uniform sampler2D filterInput;
layout(binding = 10, rgba16f) uniform writeonly image2D outColors;
layout(binding = 11, rgba16f) uniform writeonly image2D outMoments;
layout(binding = 12, rgba16f) uniform writeonly image2D outDebug;

layout(push_constant) uniform PushConstants
{
    uint reset;
    uint padding;
    vec2 padding2;
} constants;

const ivec2 twoTapOffsets[4] = {
    ivec2(0, 0),
    ivec2(1, 0),
    ivec2(0, 1),
    ivec2(1, 1)
};

vec2 SurfacePointReprojection(ivec2 coord, vec2 motionVector, ivec2 size)
{
    return vec2(coord) + motionVector * size;
}

vec2 ProjectCoord(ivec2 coord, vec2 motionVector, ivec2 size)
{
    return SurfacePointReprojection(coord, motionVector, size);
}

bool ReprojectionCheckPlaneDistance(vec3 newPos, vec3 prevPos, vec3 newNormal)
{
    float dist = abs(dot(newPos - prevPos, newNormal));
    return dist > MAX_PLANE_DISTANCE;
}

bool ReprojectionCheckOutOfFrame(ivec2 prevCoord, ivec2 size)
{
    return (
        any(lessThan(prevCoord, ivec2(0, 0))) ||
        any(greaterThan(prevCoord, size - ivec2(1, 1)))
    );
}

bool ReprojectionCheckNormals(vec3 newNormal, vec3 prevNormal)
{
    return pow(abs(dot(newNormal, prevNormal)), 2) <= MAX_NORMAL_DISTANCE;
}

bool IsReprojectionValid(ivec2 prevCoord, ivec2 size, vec3 newPos, vec3 prevPos, vec3 newNormal, vec3 prevNormal)
{
    if (ReprojectionCheckOutOfFrame(prevCoord, size))
        return false;
    if (ReprojectionCheckPlaneDistance(newPos, prevPos, newNormal))
        return false;
    if (ReprojectionCheckNormals(newNormal, prevNormal))
        return false;
    return true;
}

void NeighborhoodStandardDeviation(ivec2 coord, out vec3 mean, out vec3 dev)
{
    vec3 m1 = vec3(0.0f);
    vec3 m2 = vec3(0.0f);

    int radius = 8;
    float weight = (float(radius) * 2.0f + 1.0f) * (float(radius) * 2.0f + 1.0f);
    for (int dx = -radius; dx <= radius; dx++)
    {
        for (int dy = -radius; dy <= radius; dy++)
        {
            ivec2 sampleCoord = coord + ivec2(dx, dy);
            vec3 sampleColor = texelFetch(filterInput, sampleCoord, 0).rgb;

            m1 += sampleColor;
            m2 += sampleColor * sampleColor;
        }
    }

    mean = m1 / weight;
    vec3 variance = (m2 / weight) - (mean * mean);

    dev = sqrt(max(variance, 0.0f));
}

vec3 ClipAABB(vec3 minVal, vec3 maxVal, vec3 value)
{
    vec3 center = 0.5f * (maxVal + minVal);
    vec3 extent = 0.5f * (maxVal - minVal) + 0.001f;

    vec3 vector = value - center;
    vec3 vectorClip = abs(vector / extent);
    float maxComponent = max(max(vectorClip.x, vectorClip.y), vectorClip.z);

    if (maxComponent > 1.0)
        return center + vector / maxComponent; // Clip
    return value; // Already clipped
}

void main()
{
    const ivec2 size = textureSize(filterInput, 0);
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (coord.x >= size.x || coord.y >= size.y)
        return;

    const vec4 gbuf2 = texelFetch(newGBuffer2, coord, 0);
    const vec4 filterColor = texelFetch(filterInput, coord, 0);

    // Check roughness. We do not need to accumulate mirror reflections
    if (gbuf2.a <= 0.05)
    {
        imageStore(outColors, coord, filterColor);
        imageStore(outMoments, coord, vec4(0.f));
        return;
    }

    const vec3 newNormal = gbuf2.xyz;
    const vec2 texCoord = (vec2(coord) + vec2(0.5)) / size;
    const float newDepth = texelFetch(newGBufferDepth, coord, 0).r;
    const vec3 newPos = ComputeWorldPositionFromDepth(
        texCoord,
        newDepth,
        frameBuffer.data.invViewProj
    );

    if (newDepth == 1.0 - float(frameBuffer.data.reverseDepth))
    {
        imageStore(outColors, coord, vec4(0.f));
        imageStore(outMoments, coord, vec4(0.f));
        return;
    }

    const float filterLuminance = Luminance(filterColor.rgb);
    const float newRoughness = max(texelFetch(newGBuffer2, coord, 0).a, 0.01);

    const vec2 motionVector = texelFetch(newGBuffer3, coord, 0).rg;
    const vec2 prevTexCoord = texCoord + motionVector;
    const vec2 prevCoord = ProjectCoord(coord, motionVector, size);

    if (constants.reset == 0)
    {
        vec3 historyColor = vec3(0.f);
        vec2 historyMoments = vec2(0.f);
        float historyLength = 0.f;

        // Bilinear weights
        float x = fract(prevCoord.x);
        float y = fract(prevCoord.y);
        float weights[4] = {
            (1 - x) * (1 - y),
            x * (1 - y),
            (1 - x) * y,
            x * y
        };
        
        // 2x2-tap bilinear filter - check for reprojection validity
        float weightSum = 0.f; 
        for (uint i = 0; i < 4; i++)
        {
            ivec2 p = ivec2(prevCoord) + twoTapOffsets[i];

            const vec3 prevNormal = texelFetch(prevGBuffer2, p, 0).xyz;
            const float prevDepth = texelFetch(prevGBufferDepth, p, 0).r;
            const vec3 prevPos = ComputeWorldPositionFromDepth(
                prevTexCoord,
                prevDepth,
                frameBuffer.data.invViewProj
            );

            bool valid = IsReprojectionValid(
                ivec2(prevCoord),
                size,
                newPos,
                prevPos,
                newNormal,
                prevNormal
            );

            if (valid)
            {
                const vec4 prevMoments = texelFetch(prevMoments, p, 0);
                weightSum += weights[i];
                historyColor += weights[i] * texelFetch(prevColors, p, 0).rgb;
                historyMoments += weights[i] * prevMoments.rg;
                historyLength += weights[i] * prevMoments.b;
            }
        }

        bool valid = false;
        if (weightSum > 0.01)
        {
            historyColor /= weightSum;
            historyMoments /= weightSum;
            historyLength /= weightSum;
            valid = true;
        }
        else
        {
            float count = 0.0;

            // Larger search
            const int radius = 1;
            for (int y = -radius; y <= radius; y++)
            {
                for (int x = -radius; x <= radius; x++)
                {
                    ivec2 p = ivec2(prevCoord) + ivec2(x, y);

                    const vec3 prevNormal = texelFetch(prevGBuffer2, p, 0).xyz;
                    const float prevDepth = texelFetch(prevGBufferDepth, p, 0).r;
                    const vec3 prevPos = ComputeWorldPositionFromDepth(
                        prevTexCoord,
                        prevDepth,
                        frameBuffer.data.invViewProj
                    );

                    bool valid = IsReprojectionValid(
                        ivec2(prevCoord),
                        size,
                        newPos,
                        prevPos,
                        newNormal,
                        prevNormal
                    );

                    if (valid)
                    {
                        const vec4 prevMoments = texelFetch(prevMoments, p, 0);
                        historyColor += texelFetch(prevColors, p, 0).rgb;
                        historyMoments += prevMoments.rg;
                        historyLength += prevMoments.b;
                        count += 1;
                    }
                }
            }

            if (count > 0)
            {
                valid = true;
                historyColor /= count;
                historyMoments /= count;
                historyLength /= count;
            }
        }
        
        if (valid)
        {
            historyLength = historyLength + 1;//min(32.f, historyLength + 1);

            float colorAlpha = max(1.f / float(historyLength), 0.003);
            float momentsAlpha = max(1.f / float(historyLength), 0.003);
            float rough2 = newRoughness * newRoughness;
            colorAlpha = clamp(colorAlpha / rough2, 0.02, 0.4);
            momentsAlpha = clamp(momentsAlpha / rough2, 0.02, 0.4);

            vec3 dev;
            vec3 mean;
            NeighborhoodStandardDeviation(coord, mean, dev);

            vec3 radianceMin = mean - dev;
            vec3 radianceMax = mean + dev;
            historyColor.rgb = ClipAABB(radianceMin, radianceMax, historyColor.rgb);

            vec2 moments = vec2(filterLuminance, filterLuminance * filterLuminance);

            // Moments integration
            moments = mix(historyMoments, moments, momentsAlpha);

            float variance = max(0.f, moments.g - moments.r * moments.r);

            // Radiance integration
            vec3 color = mix(historyColor, filterColor.rgb, colorAlpha);

            imageStore(outColors, coord, vec4(color, variance));
            imageStore(outMoments, coord, vec4(moments, historyLength, 0.f));
            imageStore(outDebug, coord, vec4(color, 1.0));

            return;
        }
    }

    // No valid history
    imageStore(
        outColors,
        coord,
        vec4(filterColor.rgb, 100.0)
    );
    imageStore(
        outMoments,
        coord,
        vec4(filterLuminance, filterLuminance * filterLuminance, 1.0, 0.0)
    );
}
