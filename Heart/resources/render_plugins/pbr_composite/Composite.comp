#version 460

#define FRAME_BUFFER_BINDING 0
#define FRAME_BUFFER_SET 0
#include "../frame_data/FrameBuffer.glsl"

#define LIGHT_BUFFER_BINDING 1
#define LIGHT_BUFFER_SET 0
#include "../lighting_data/LightingBuffer.glsl"

#define CLUSTER_LIGHT_INDICES_BINDING 2
#define CLUSTER_LIGHT_GRID_BINDING 3
#define CLUSTER_DATA_BINDING 4
#define CLUSTER_BUFFER_SET 0
#include "../clustered_lighting/ClusterBuffer.glsl"

#include "../util/Misc.glsl"
#include "../util/Colormap.glsl"
#include "../util/Lighting.glsl"
#include "../util/BRDF.glsl"
#include "../gbuffer/Util.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(push_constant) uniform PushConstants
{
    uint ssaoEnable;
} constants;

layout(binding = 5) uniform sampler2D gBufferNormals;
layout(binding = 6) uniform usampler2D gBufferColors;
layout(binding = 7) uniform sampler2D gBufferEmissive;
layout(binding = 8) uniform sampler2D gBufferDepth;
layout(binding = 9) uniform sampler2D brdfTex;
layout(binding = 10, rgba16f) uniform writeonly image2D outColor;
layout(binding = 11) uniform samplerCube prefilterMap;
layout(binding = 12) uniform samplerCube irradianceMap;
layout(binding = 13) uniform sampler2D ssao;

void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (coord.x >= frameBuffer.data.screenSize.x || coord.y >= frameBuffer.data.screenSize.y)
        return;

    // Skybox
    float depth = texelFetch(gBufferDepth, coord, 0).r;
    if (depth == 1.0 - float(frameBuffer.data.reverseDepth))
        return;

    vec2 texCoord = (vec2(coord) + vec2(0.5)) / frameBuffer.data.screenSize.xy;

    // === Unpack GBuffer data ===

    vec3 albedo;
    float metalness, roughness;
    uvec4 colorData = texelFetch(gBufferColors, coord, 0);
    UnpackColorData(colorData, albedo, metalness, roughness);

    vec4 normalData = texelFetch(gBufferNormals, coord, 0);
    vec3 normal = OctahedronDecode(normalData.rg);
    vec2 motionVector = normalData.ba;

    vec4 emissiveData = texelFetch(gBufferEmissive, coord, 0);
    vec3 emissive = emissiveData.rgb;
    float occlusion = emissiveData.a;

    // ============================

    vec3 P = ComputeWorldPositionFromDepth(texCoord, depth, frameBuffer.data.invViewProj);
    vec3 N = normal;
    vec3 V = normalize(frameBuffer.data.cameraPos.xyz - P);

    vec3 F0 = mix(vec3(0.04), albedo.rgb, metalness);
    vec3 diffuse = mix(albedo.rgb * (vec3(1.0) - F0), vec3(0.0), metalness);

    // Direct lighitng

    // Compute cluster indices
    // Flip the depth when appropriate so the close value is always zero
    uint clusterZ = GetClusterZIndex(
        frameBuffer.data.reverseDepth ? 1 - depth : depth,
        frameBuffer.data.clipPlanes.x,
        frameBuffer.data.clipPlanes.y,
        GET_CLUSTER_DATA().clusterScale,
        GET_CLUSTER_DATA().clusterBias
    );
    uint clusterIdx = GetClusterIndex(
        vec2(coord),
        frameBuffer.data.screenSize.xy,
        GET_CLUSTER_DATA().clusterDims,
        clusterZ
    );

    LightGrid grid = GetLightGrid(clusterIdx);
    vec3 finalContribution = vec3(0.f);
    for (uint i = 0; i < grid.lightCount; i++)
    {
        uint lightIndex = GetGridLightIndex(grid.offset, i) + 1;

        LightEvalData data;
        if (GET_LIGHT(lightIndex).lightType == LIGHT_POINT)
            GetPointLightEvalData(data, GET_LIGHT(lightIndex), P, N);
        else if (GET_LIGHT(lightIndex).lightType == LIGHT_DIRECTIONAL)
            GetDirectionalLightEvalData(data, GET_LIGHT(lightIndex), N);

        if (data.nDotL <= 0)
            continue;

        finalContribution += EvaluateLightBRDF(data, N, V, F0, diffuse, roughness);
    }
    
    // Indirect lighting
    {
        vec3 R = reflect(-V, N);
        vec3 F = FresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);

        vec3 kS = F;
        vec3 kD = 1.0 - kS;
        kD *= 1.0 - metalness;

        vec3 irradiance = texture(irradianceMap, N).rgb;
        vec3 prefilteredColor = textureLod(prefilterMap, R, roughness * 4.0).rgb;   

        vec3 diffuse = irradiance * albedo;
        vec2 brdf = texture(brdfTex, vec2(max(dot(N, V), 0.0), roughness)).rg;
        vec3 specular = prefilteredColor * (F * brdf.x + brdf.y);

        float finalOcclusion = occlusion;
        if (constants.ssaoEnable == 1)
            finalOcclusion *= texture(ssao, texCoord).r;
        finalContribution += (kD * diffuse + specular) * finalOcclusion;
    }

    finalContribution += emissive * albedo;

    //finalContribution = TurboColormap(float(grid.lightCount) / 100);

    imageStore(outColor, coord, vec4(finalContribution, 1.f));
}
