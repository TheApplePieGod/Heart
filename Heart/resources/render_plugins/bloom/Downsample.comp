#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#include "Common.glsl"

layout(binding = 0) uniform sampler2D srcTex;
layout(binding = 1, rgba16f) writeonly uniform image2D dstTex;

// https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom
void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    
    if (coord.x >= constants.dstResolution.x || coord.y >= constants.dstResolution.y) return;
    
    vec2 texCoord = coord / constants.dstResolution;
    float dx = 1.0 / constants.srcResolution.x;
    float dy = 1.0 / constants.srcResolution.y;
    
    // Offset texCoord to match central texel position in src texture
    texCoord += vec2(dx, dy);

    vec3 a = texture(srcTex, vec2(texCoord.x - 2*dx, texCoord.y + 2*dy)).rgb;
    vec3 b = texture(srcTex, vec2(texCoord.x,        texCoord.y + 2*dy)).rgb;
    vec3 c = texture(srcTex, vec2(texCoord.x + 2*dx, texCoord.y + 2*dy)).rgb;

    vec3 d = texture(srcTex, vec2(texCoord.x - 2*dx, texCoord.y)).rgb;
    vec3 e = texture(srcTex, vec2(texCoord.x,        texCoord.y)).rgb;
    vec3 f = texture(srcTex, vec2(texCoord.x + 2*dx, texCoord.y)).rgb;

    vec3 g = texture(srcTex, vec2(texCoord.x - 2*dx, texCoord.y - 2*dy)).rgb;
    vec3 h = texture(srcTex, vec2(texCoord.x,        texCoord.y - 2*dy)).rgb;
    vec3 i = texture(srcTex, vec2(texCoord.x + 2*dx, texCoord.y - 2*dy)).rgb;

    vec3 j = texture(srcTex, vec2(texCoord.x - dx, texCoord.y + dy)).rgb;
    vec3 k = texture(srcTex, vec2(texCoord.x + dx, texCoord.y + dy)).rgb;
    vec3 l = texture(srcTex, vec2(texCoord.x - dx, texCoord.y - dy)).rgb;
    vec3 m = texture(srcTex, vec2(texCoord.x + dx, texCoord.y - dy)).rgb;

    vec3 downsample = e * 0.125;
    downsample += (a + c + g + i) * 0.03125;
    downsample += (b + d + f + h) * 0.0625;
    downsample += (j + k + l + m) * 0.125;

    if (constants.prefilter == 1)
        downsample = QuadraticThreshold(downsample);
    
    imageStore(dstTex, coord, vec4(downsample, 1.f));
}
