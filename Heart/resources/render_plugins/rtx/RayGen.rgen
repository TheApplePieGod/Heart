#version 460
#extension GL_EXT_ray_tracing : require

#include "../frame_data/FrameBuffer.glsl"
#include "Common.glsl"

layout(binding = 1) uniform accelerationStructureEXT tlas;
layout(binding = 2, rgba16f) uniform writeonly image2D image;

layout(location = 0) rayPayloadEXT HitPayload prd;

void main() 
{
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 pixCoords = inUV * 2.0 - 1.0;

    vec4 origin = frameBuffer.data.invView * vec4(0, 0, 0, 1);
    vec4 target = frameBuffer.data.invProj * vec4(pixCoords.x, pixCoords.y, 1, 1);
    vec4 direction = frameBuffer.data.invView * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = frameBuffer.data.clipPlanes.x;
    float tMax = frameBuffer.data.clipPlanes.y;
    traceRayEXT(
        tlas,           // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        origin.xyz,     // ray origin
        tMin,           // ray min range
        direction.xyz,  // ray direction
        tMax,           // ray max range
        0               // payload (location = 0)
    );

    imageStore(
        image,
        ivec2(gl_LaunchIDEXT.xy),
        vec4(prd.hitValue, 1.0)
    );
}
