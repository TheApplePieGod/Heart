#version 450

#include "FrameBuffer.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

struct Data {
    vec4 samples[64];
    uint kernelSize;
    float radius;
    float bias;
    float padding;
};

layout(binding = 1) readonly uniform DataBuffer {
    Data data;
} dataBuffer;

layout(binding = 2) uniform sampler2D depthTex;
layout(binding = 3) uniform sampler2D noiseTex;
layout(binding = 4, r16f) writeonly uniform image2D ssaoTex;

vec3 ComputePosition(vec2 uv, float depth)
{
    float x = uv.x * 2.0f - 1.0f;
    float y = (1.0 - uv.y) * 2.0f - 1.0f;
    vec4 positionS = vec4(x, y, depth, 1.0f);
    vec4 positionV = frameBuffer.data.invViewProj * positionS;
    return positionV.xyz / positionV.w;
}

// https://learnopengl.com/Advanced-Lighting/SSAO
void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    
    if (coord.x >= frameBuffer.data.screenSize.x || coord.y >= frameBuffer.data.screenSize.y) return;
    
    vec2 texCoord = coord / frameBuffer.data.screenSize;
    float dx = 1.0 / frameBuffer.data.screenSize.x;
    float dy = 1.0 / frameBuffer.data.screenSize.y;
    
    // Offset texcoord to match texel offsets
    texCoord += vec2(dx, dy);

    vec2 uv1 = texCoord + vec2(dx, 0);
    vec2 uv2 = texCoord + vec2(0, -dy);
    float depth = texture(depthTex, texCoord).r; // Center
    float depth1 = texture(depthTex, uv1).r; // Right
    float depth2 = texture(depthTex, uv2).r; // Top

    vec3 position = ComputePosition(texCoord, depth);
    vec3 P1 = ComputePosition(uv1, depth1);
    vec3 P2 = ComputePosition(uv2, depth2);
    vec3 normal = normalize(cross(P2 - position, P1 - position));

    vec2 noiseScale = vec2(frameBuffer.data.screenSize.x * 0.25, frameBuffer.data.screenSize.y * 0.25); 
    vec3 randomVec = normalize(texture(noiseTex, texCoord * noiseScale).xyz);
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);

    // Compute total occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < dataBuffer.data.kernelSize; i++)
    {
        // Get sample position
        vec3 samplePos = TBN * dataBuffer.data.samples[i].xyz; // from tangent to view-space
        samplePos = position + samplePos * dataBuffer.data.radius; 
        
        // Project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samplePos, 1.0);
        offset = frameBuffer.data.proj * offset;
        offset.xyz /= offset.w;
        offset.xyz = offset.xyz * 0.5 + 0.5;
        
        // Get sample depth
        float sampleDepth = texture(depthTex, offset.xy).r;
        
        // Range check & accumulate
        occlusion += (sampleDepth >= samplePos.z + dataBuffer.data.bias ? 1.0 : 0.0);  
        //float rangeCheck = smoothstep(0.0, 1.0, dataBuffer.data.radius / abs(depth - sampleDepth));
        //occlusion += (sampleDepth >= samplePos.z + dataBuffer.data.bias ? 1.0 : 0.0) * rangeCheck;           
    }
    occlusion = 1.0 - (occlusion / dataBuffer.data.kernelSize);

    imageStore(ssaoTex, coord, vec4(occlusion, 0.f, 0.f, 0.f));
}